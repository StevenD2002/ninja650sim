// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/motorcycle.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MotorcycleSimulatorClient is the client API for MotorcycleSimulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MotorcycleSimulatorClient interface {
	// Stream real-time engine data
	StreamEngine(ctx context.Context, opts ...grpc.CallOption) (MotorcycleSimulator_StreamEngineClient, error)
	// Get current ECU maps
	GetECUMaps(ctx context.Context, in *MapsRequest, opts ...grpc.CallOption) (*ECUMaps, error)
	// Update a specific map cell
	UpdateECUMap(ctx context.Context, in *MapUpdateRequest, opts ...grpc.CallOption) (*UpdateStatus, error)
	// Update ECU settings
	SetECUSettings(ctx context.Context, in *ECUSettings, opts ...grpc.CallOption) (*UpdateStatus, error)
}

type motorcycleSimulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewMotorcycleSimulatorClient(cc grpc.ClientConnInterface) MotorcycleSimulatorClient {
	return &motorcycleSimulatorClient{cc}
}

func (c *motorcycleSimulatorClient) StreamEngine(ctx context.Context, opts ...grpc.CallOption) (MotorcycleSimulator_StreamEngineClient, error) {
	stream, err := c.cc.NewStream(ctx, &MotorcycleSimulator_ServiceDesc.Streams[0], "/motorcycle.MotorcycleSimulator/StreamEngine", opts...)
	if err != nil {
		return nil, err
	}
	x := &motorcycleSimulatorStreamEngineClient{stream}
	return x, nil
}

type MotorcycleSimulator_StreamEngineClient interface {
	Send(*UserInput) error
	Recv() (*EngineData, error)
	grpc.ClientStream
}

type motorcycleSimulatorStreamEngineClient struct {
	grpc.ClientStream
}

func (x *motorcycleSimulatorStreamEngineClient) Send(m *UserInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *motorcycleSimulatorStreamEngineClient) Recv() (*EngineData, error) {
	m := new(EngineData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motorcycleSimulatorClient) GetECUMaps(ctx context.Context, in *MapsRequest, opts ...grpc.CallOption) (*ECUMaps, error) {
	out := new(ECUMaps)
	err := c.cc.Invoke(ctx, "/motorcycle.MotorcycleSimulator/GetECUMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorcycleSimulatorClient) UpdateECUMap(ctx context.Context, in *MapUpdateRequest, opts ...grpc.CallOption) (*UpdateStatus, error) {
	out := new(UpdateStatus)
	err := c.cc.Invoke(ctx, "/motorcycle.MotorcycleSimulator/UpdateECUMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motorcycleSimulatorClient) SetECUSettings(ctx context.Context, in *ECUSettings, opts ...grpc.CallOption) (*UpdateStatus, error) {
	out := new(UpdateStatus)
	err := c.cc.Invoke(ctx, "/motorcycle.MotorcycleSimulator/SetECUSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotorcycleSimulatorServer is the server API for MotorcycleSimulator service.
// All implementations must embed UnimplementedMotorcycleSimulatorServer
// for forward compatibility
type MotorcycleSimulatorServer interface {
	// Stream real-time engine data
	StreamEngine(MotorcycleSimulator_StreamEngineServer) error
	// Get current ECU maps
	GetECUMaps(context.Context, *MapsRequest) (*ECUMaps, error)
	// Update a specific map cell
	UpdateECUMap(context.Context, *MapUpdateRequest) (*UpdateStatus, error)
	// Update ECU settings
	SetECUSettings(context.Context, *ECUSettings) (*UpdateStatus, error)
	mustEmbedUnimplementedMotorcycleSimulatorServer()
}

// UnimplementedMotorcycleSimulatorServer must be embedded to have forward compatible implementations.
type UnimplementedMotorcycleSimulatorServer struct {
}

func (UnimplementedMotorcycleSimulatorServer) StreamEngine(MotorcycleSimulator_StreamEngineServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEngine not implemented")
}
func (UnimplementedMotorcycleSimulatorServer) GetECUMaps(context.Context, *MapsRequest) (*ECUMaps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetECUMaps not implemented")
}
func (UnimplementedMotorcycleSimulatorServer) UpdateECUMap(context.Context, *MapUpdateRequest) (*UpdateStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateECUMap not implemented")
}
func (UnimplementedMotorcycleSimulatorServer) SetECUSettings(context.Context, *ECUSettings) (*UpdateStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetECUSettings not implemented")
}
func (UnimplementedMotorcycleSimulatorServer) mustEmbedUnimplementedMotorcycleSimulatorServer() {}

// UnsafeMotorcycleSimulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotorcycleSimulatorServer will
// result in compilation errors.
type UnsafeMotorcycleSimulatorServer interface {
	mustEmbedUnimplementedMotorcycleSimulatorServer()
}

func RegisterMotorcycleSimulatorServer(s grpc.ServiceRegistrar, srv MotorcycleSimulatorServer) {
	s.RegisterService(&MotorcycleSimulator_ServiceDesc, srv)
}

func _MotorcycleSimulator_StreamEngine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MotorcycleSimulatorServer).StreamEngine(&motorcycleSimulatorStreamEngineServer{stream})
}

type MotorcycleSimulator_StreamEngineServer interface {
	Send(*EngineData) error
	Recv() (*UserInput, error)
	grpc.ServerStream
}

type motorcycleSimulatorStreamEngineServer struct {
	grpc.ServerStream
}

func (x *motorcycleSimulatorStreamEngineServer) Send(m *EngineData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *motorcycleSimulatorStreamEngineServer) Recv() (*UserInput, error) {
	m := new(UserInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MotorcycleSimulator_GetECUMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorcycleSimulatorServer).GetECUMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motorcycle.MotorcycleSimulator/GetECUMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorcycleSimulatorServer).GetECUMaps(ctx, req.(*MapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorcycleSimulator_UpdateECUMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorcycleSimulatorServer).UpdateECUMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motorcycle.MotorcycleSimulator/UpdateECUMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorcycleSimulatorServer).UpdateECUMap(ctx, req.(*MapUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotorcycleSimulator_SetECUSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECUSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotorcycleSimulatorServer).SetECUSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motorcycle.MotorcycleSimulator/SetECUSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotorcycleSimulatorServer).SetECUSettings(ctx, req.(*ECUSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// MotorcycleSimulator_ServiceDesc is the grpc.ServiceDesc for MotorcycleSimulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotorcycleSimulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "motorcycle.MotorcycleSimulator",
	HandlerType: (*MotorcycleSimulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetECUMaps",
			Handler:    _MotorcycleSimulator_GetECUMaps_Handler,
		},
		{
			MethodName: "UpdateECUMap",
			Handler:    _MotorcycleSimulator_UpdateECUMap_Handler,
		},
		{
			MethodName: "SetECUSettings",
			Handler:    _MotorcycleSimulator_SetECUSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEngine",
			Handler:       _MotorcycleSimulator_StreamEngine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/motorcycle.proto",
}
